<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OAuth</name>
    </assembly>
    <members>
        <member name="T:OAuth.Manager">
            <summary>
              A class to manage OAuth 1.0A interactions. This works with
              Twitter, not sure about other OAuth-enabled services.
            </summary>
            <remarks>
              <para>
                This class holds the relevant oauth parameters, as well as
                state for the oauth authentication dance.  This class also
                exposes methods that communicate with the OAuth provider, or
                generate elaborated quantities (like Authorization header
                strings) based on all the oauth properties.
              </para>
              <para>
                OAuth 1.0A is ostensibly a standard, but as far as I am
                aware, only Twitter implements the standard. Other services
                implement *slightly* different oauth services.  This class
                has been tested to work only with Twitter.
              </para>
              <para>
                See <see href="http://dev.twitpic.com/docs/2/upload/">
                http://dev.twitpic.com/docs/2/upload/</see>
                for an example of the oauth parameters. The parameters include token,
                consumer_key, timestamp, version, and so on. In the actual HTTP
                message, they all include the oauth_ prefix, so ..  oauth_token,
                oauth_timestamp, and so on. You set these via a string indexer.
                If the instance of the class is called oauth, then to set the
                oauth_token parameter, you use oath["token"] in C#.
              </para>
              <para>
                This class automatically sets many of the required oauth parameters;
                this includes the timestamp, nonce, callback, and version parameters.
                (The callback param is initialized to 'oob'). You can reset any of
                these parameters as you see fit.  In many cases you won't have to.
              </para>
              <para>
                The public methods on the class include:
                AcquireRequestToken, AcquireAccessToken,
                GenerateCredsHeader, and GenerateAuthzHeader.  The
                first two are used only on the first run of an applicaiton,
                or after a user has explicitly de-authorized an application
                for use with OAuth.  Normally, the GenerateXxxHeader methods
                can be used repeatedly, when sending HTTP messages that
                require an OAuth Authorization header.
              </para>
              <para>
                The AcquireRequestToken and AcquireAccessToken methods
                actually send out HTTP messages.
              </para>
              <para>
                The GenerateXxxxHeaders are used when constructing and
                sending your own HTTP messages.
              </para>
            </remarks>
        </member>
        <member name="M:OAuth.Manager.#ctor">
            <summary>
              The default public constructor.
            </summary>
            <remarks>
              <para>
                This constructor initializes the internal fields in the
                Manager instance to default values.
              </para>
            </remarks>
        </member>
        <member name="M:OAuth.Manager.#ctor(System.String,System.String,System.String,System.String)">
             <summary>
               The constructor to use when using OAuth when you already
               have an OAuth access token.
             </summary>
             <remarks>
               <para>
                 The parameters for this constructor all have the
                 meaning you would expect.  The token and tokenSecret
                 are set in oauth_token, and oauth_token_secret.
                 These are *Access* tokens, obtained after a call
                 to AcquireAccessToken.  The application can store
                 those tokens and re-use them on successive runs.
                 For twitter at least, the access tokens never expire.
               </para>
             </remarks>
            
             <param name="consumerKey">The oauth_consumer_key parameter for
             OAuth. Get this, along with the consumer secret value, by manually
             registering your app with Twitter at
             <see href="http://twitter.com/apps/new">http://twitter.com/apps/new</see>
             </param>
            
             <param name="consumerSecret">The oauth_consumer_secret
             parameter for oauth.</param>
            
             <param name="token">The oauth_token parameter for
             oauth. This is sometimes called the Access Token.</param>
            
             <param name="tokenSecret">The oauth_token_secret parameter for
             oauth. This is sometimes called the Access Token Secret.</param>
        </member>
        <member name="M:OAuth.Manager.#ctor(System.String,System.String)">
             <summary>
               The constructor to use when using OAuth when you already
               have an OAuth consumer key and sercret, but need to
               acquire an oauth access token.
             </summary>
             <remarks>
               <para>
                 The parameters for this constructor are the consumer_key
                 and consumer_secret that you get, manually, by
                 registering your application with Twitter.
               </para>
               <para>
                 What you need to do after instantiating the Manager
                 class with this constructor is set or obtain the access
                 key and token. See the examples provided elsewhere
                 for an illustration.
               </para>
             </remarks>
            
             <param name="consumerKey">The oauth_consumer_key parameter for
             oauth. Get this, along with the consumerSecret, by manually
             registering your app with Twitter at
             <see href="http://twitter.com/apps/new">http://twitter.com/apps/new</see>
             </param>
            
             <param name="consumerSecret">The oauth_consumer_secret
             parameter for oauth.</param>
            
        </member>
        <member name="M:OAuth.Manager.GenerateTimeStamp">
             <summary>
             Generate the timestamp for the signature.
             </summary>
            
             <returns>The timestamp, in string form.</returns>
        </member>
        <member name="M:OAuth.Manager.NewRequest">
            <summary>
              Renews the nonce and timestamp on the oauth parameters.
            </summary>
            <remarks>
              <para>
                Each new request should get a new, current timestamp, and a
                nonce. This helper method does both of those things. This gets
                called before generating an authorization header, as for example
                when the user of this class calls <see cref="M:OAuth.Manager.AcquireRequestToken"/>.
              </para>
            </remarks>
        </member>
        <member name="M:OAuth.Manager.GenerateNonce">
            <summary>
            Generate an oauth nonce.
            </summary>
            <remarks>
              <para>
                According to <see
                href="http://tools.ietf.org/html/rfc5849">RFC 5849</see>, A
                nonce is a random string, uniquely generated by the client to
                allow the server to verify that a request has never been made
                before and helps prevent replay attacks when requests are made
                over a non-secure channel.  The nonce value MUST be unique
                across all requests with the same timestamp, client
                credentials, and token combinations.
              </para>
              <para>
                One way to implement the nonce is just to use a
                monotonically-increasing integer value.  It starts at zero and
                increases by 1 for each new request or signature generated.
                Keep in mind the nonce needs to be unique only for a given
                timestamp!  So if your app makes less than one request per
                second, then using a static nonce of "0" will work.
              </para>
              <para>
                Most oauth nonce generation routines are waaaaay over-engineered,
                and this one is no exception.
              </para>
            </remarks>
            <returns>the nonce</returns>
        </member>
        <member name="M:OAuth.Manager.ExtractQueryParameters(System.String)">
             <summary>
             Internal function to extract from a URL all query string
             parameters that are not related to oauth - in other words all
             parameters not begining with "oauth_".
             </summary>
            
             <remarks>
               <para>
                 For example, given a url like http://foo?a=7&amp;guff, the
                 returned value will be a Dictionary of string-to-string
                 relations.  There will be 2 entries in the Dictionary: "a"=>7,
                 and "guff"=>"".
               </para>
             </remarks>
            
             <param name="queryString">The query string part of the Url</param>
            
             <returns>A Dictionary containing the set of
             parameter names and associated values</returns>
        </member>
        <member name="M:OAuth.Manager.UrlEncode(System.String)">
             <summary>
               This method performs oauth-compliant Url Encoding.
             </summary>
             <remarks>
               <para>
                 The default .NET encoder outputs the percent encoding in lower
                 case.  While this is not a problem with the percent encoding
                 defined in <see href="http://tools.ietf.org/html/rfc3986">RFC
                 3986</see>, (<see
                 href="http://tools.ietf.org/html/rfc5849">RFC 5849</see>)
                 requires that the encoding characters be upper case throughout
                 OAuth.
               </para>
               <para>
                 For example, if you try to post a tweet message that
                 includes ampersands, those need to be encoded, and the
                 hex digits need to be uppercase.
               </para>
             </remarks>
            
             <param name="value">The value to encode</param>
            
             <example>
             <code>
               var twitterUpdateUrlBase = "http://api.twitter.com/1/statuses/update.xml?status=";
               var url = twitterUpdateUrlBase + OAuth.Manager.UrlEncode(message);
               var authzHeader = oauth.GenerateAuthzHeader(url, "POST");
               var request = (HttpWebRequest)WebRequest.Create(url);
               request.Method = "POST";
               request.PreAuthenticate = true;
               request.AllowWriteStreamBuffering = true;
               request.Headers.Add("Authorization", authzHeader);
               using (var response = (HttpWebResponse)request.GetResponse())
               {
                 ...
               }
             </code>
             </example>
             <returns>the Url-encoded version of that string</returns>
        </member>
        <member name="M:OAuth.Manager.EncodeRequestParameters(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
             <summary>
             Formats the list of request parameters into string a according
             to the requirements of oauth. The resulting string could be used
             in the Authorization header of the request.
             </summary>
            
             <remarks>
               <para>
                 See <see
                 href="http://dev.twitter.com/pages/auth#intro">Twitter's OAUth
                 documentation page</see> for some background. The output of
                 this call is not suitable for signing.
               </para>
               <para>
                 There are 2 formats for specifying the list of oauth
                 parameters in the oauth spec: one suitable for signing, and
                 the other suitable for use within Authorization HTTP Headers.
                 This method emits a string suitable for the latter.
               </para>
             </remarks>
            
             <param name="p">The Dictionary of parameters. It need not be
             sorted. Actually, strictly speaking, it need not be a
             dictionary, either. Just a collection of KeyValuePair.</param>
            
             <returns>a string representing the parameters</returns>
        </member>
        <member name="M:OAuth.Manager.AcquireRequestToken(System.String,System.String)">
             <summary>
               Acquire a request token from the given URI using the given
               HTTP method.
             </summary>
            
             <remarks>
               <para>
                 To use this method, first instantiate a new Oauth.Manager
                 object, then, optionally, set the callback param
                 (oauth["callback"]='oob'). Consult the Twitter documentation
                 for the meaning and usage of the callback parameter. After the
                 call returns, you should direct the user to open a browser
                 window to the authorization page for the OAuth-enabled
                 service. Or, you can automatically open that page yourself. Do
                 this with System.Diagnostics.Process.Start(), passing the URL
                 of the page.  If you're using Twitter, there should be one
                 query param: oauth_token with the value obtained from
                 oauth["token"]. See the example
               </para>
               <para>
                 According to the OAuth spec, you need to do this only ONCE per
                 application, the first time the application is run.  The
                 normal oauth workflow is: (1) get a request token, (2) use
                 that to acquire an access token (which requires explicit user
                 approval), then (3) using that access token, invoke protected
                 services. The first two steps need to be done only once, ever,
                 for each registered application. The third step can be
                 performed many times, over many invocations of the
                 application.
               </para>
               <para>
                 For Twitter, at least, you can cache the access tokens
                 indefinitely; Twitter says they never expire.  However, other
                 oauth services may not do the same. Also: the user may at any
                 time revoke his authorization for your app, in which case you
                 need to perform the first 2 steps again.
               </para>
             </remarks>
            
             <seealso cref="M:OAuth.Manager.AcquireAccessToken(System.String,System.String,System.String)"/>
             <seealso cref="M:OAuth.Manager.AcquireAccessToken(System.String)"/>
            
             <example>
               <para>
                 This example shows how to request an access token and key
                 from Twitter. It presumes you've already obtained a
                 consumer key and secret via app registration. Requesting
                 an access token is necessary only the first time you
                 contact the service. You can cache the access key and
                 token for subsequent runs, later.
               </para>
               <code>
               // the URL to obtain a temporary "request token"
               var rtUrl = "https://api.twitter.com/oauth/request_token";
               var oauth = new OAuth.Manager();
               // The consumer_{key,secret} are obtained via registration
               oauth["consumer_key"] = "~~~CONSUMER_KEY~~~~";
               oauth["consumer_secret"] = "~~~CONSUMER_SECRET~~~";
               oauth.AcquireRequestToken(rtUrl, "POST");
               // The request token is now available in oauth["token"]
               // The next step is to pop the authorization approval dialog.
               var authzUrl = "https://api.twitter.com/oauth/authorize?oauth_token=" + oauth["token"];
               System.Diagnostics.Process.Start(authzUrl);
               </code>
             </example>
            
             <param name="uri">The uri to the "request token" endpoint of
             the service that implements oauth.  For Twitter, this is
             "https://api.twitter.com/oauth/request_token".
             </param>
            
             <param name="method">The method you will use to send the
             message asking for a request token.  For Twitter, this
             should be "POST".
             </param>
            
             <returns>
               a response object that contains the entire text of the response,
               as well as extracted parameters. This method presumes the
               response is query-param encoded. In other words,
               poauth_token=foo&amp;something_else=bar.
             </returns>
        </member>
        <member name="M:OAuth.Manager.AcquireRequestToken">
             <summary>
               Acquire a request token for Twitter using the default endpoint
               and HTTP method (POST).
             </summary>
            
             <remarks>
               <para>
                 To use this method, first instantiate a new Oauth.Manager object,
                 then set the callback param (oauth["callback"]='oob'). After the
                 call returns, you should direct the user to open a browser window
                 to the authorization page for the OAuth-enabled service. Or,
                 you can automatically open that page yourself. Do this with
                 System.Diagnostics.Process.Start(), passing the URL of the page.
                 There should be one query param: oauth_token with the value
                 obtained from oauth["token"].
               </para>
               <para>
                 According to the OAuth spec, you need to do this only ONCE per
                 application.  In other words, the first time the application
                 is run.  The normal oauth workflow is:  (1) get a request token,
                 (2) use that to acquire an access token (which requires explicit
                 user approval), then (3) using that access token, invoke
                 protected services.  The first two steps need to be done only
                 once per application.
               </para>
               <para>
                 For Twitter, at least, you can cache the access tokens
                 indefinitely; Twitter says they never expire.  However, other
                 oauth services may not do the same. Also: the user may at any
                 time revoke his authorization for your app, in which case you
                 need to perform the first 2 steps again.
               </para>
             </remarks>
            
             <seealso cref="M:OAuth.Manager.AcquireAccessToken(System.String,System.String,System.String)"/>
             <seealso cref="M:OAuth.Manager.AcquireAccessToken(System.String)"/>
             <seealso cref="M:OAuth.Manager.AcquireRequestToken(System.String,System.String)"/>
            
             <example>
               <para>
                 This example shows how to request an access token and key
                 from Twitter. It presumes you've already obtained a
                 consumer key and secret via app registration. Requesting
                 an access token is necessary only the first time you
                 contact the service. You can cache the access key and
                 token for subsequent runs, later.
               </para>
               <code>
               var oauth = new OAuth.Manager();
               // The consumer_{key,secret} are obtained via registration
               oauth["consumer_key"] = "~~~CONSUMER_KEY~~~~";
               oauth["consumer_secret"] = "~~~CONSUMER_SECRET~~~";
               oauth.AcquireRequestToken();
               // The request token is now available in oauth["token"]
               // The next step is to pop the authorization approval dialog.
               var authzUrl = "https://api.twitter.com/oauth/authorize?oauth_token=" + oauth["token"];
               System.Diagnostics.Process.Start(authzUrl);
               </code>
             </example>
            
             <returns>
               a response object that contains the entire text of the response,
               as well as extracted parameters. This method presumes the
               response is query-param encoded. In other words,
               poauth_token=foo&amp;something_else=bar.
             </returns>
        </member>
        <member name="M:OAuth.Manager.AcquireAccessToken(System.String,System.String,System.String)">
             <summary>
               Acquire an access token, from the given URI, using the given
               HTTP method.
             </summary>
            
             <remarks>
               <para>
                 To use this method, you must first set the oauth_token to the value
                 of the request token.  Eg, oauth["token"] = "whatever".
               </para>
               <para>
                 According to the OAuth spec, you need to do this only ONCE per
                 application.  In other words, the first time the application
                 is run.  The normal oauth workflow is:  (1) get a request token,
                 (2) use that to acquire an access token (which requires explicit
                 user approval), then (3) using that access token, invoke
                 protected services.  The first two steps need to be done only
                 once per application.
               </para>
               <para>
                 For Twitter, at least, you can cache the access tokens
                 indefinitely; Twitter says they never expire.  However, other
                 oauth services may not do the same. Also: the user may at any
                 time revoke his authorization for your app, in which case you
                 need to perform the first 2 steps again.
               </para>
             </remarks>
            
             <seealso cref="M:OAuth.Manager.AcquireRequestToken"/>
            
             <example>
               <para>
                 This example shows how to request an access token and key
                 from Twitter. It presumes you've already obtained a
                 consumer key and secret via app registration. Requesting
                 an access token is necessary only the first time you
                 contact the service. You can cache the access key and
                 token for subsequent runs, later.
               </para>
               <code>
               // the URL to obtain a temporary "request token"
               var rtUrl = "https://api.twitter.com/oauth/request_token";
               var oauth = new OAuth.Manager();
               // The consumer_{key,secret} are obtained via registration
               oauth["consumer_key"] = "~~~CONSUMER_KEY~~~~";
               oauth["consumer_secret"] = "~~~CONSUMER_SECRET~~~";
               oauth.AcquireRequestToken(rtUrl, "POST");
               var authzUrl = "https://api.twitter.com/oauth/authorize?oauth_token=" + oauth["token"];
               // Normally you'd want to pop this in a WebBrowser control.
               // For the example only, we'll pop the URL in a separate browser.
               System.Diagnostics.Process.Start(authzUrl);
               // instruct the user to type in the PIN from that browser window
               var pin = "...";
               var atUrl = "https://api.twitter.com/oauth/access_token";
               oauth.AcquireAccessToken(atUrl, "POST", pin);
            
               // now, update twitter status using that access token
               var appUrl = "http://api.twitter.com/1/statuses/update.xml?status=Hello";
               var authzHeader = oauth.GenerateAuthzHeader(appUrl, "POST");
               var request = (HttpWebRequest)WebRequest.Create(appUrl);
               request.Method = "POST";
               request.PreAuthenticate = true;
               request.AllowWriteStreamBuffering = true;
               request.Headers.Add("Authorization", authzHeader);
            
               using (var response = (HttpWebResponse)request.GetResponse())
               {
                 if (response.StatusCode != HttpStatusCode.OK)
                   MessageBox.Show("There's been a problem trying to tweet:" +
                                   Environment.NewLine +
                                   response.StatusDescription);
               }
               </code>
             </example>
            
             <param name="uri">The uri to the "access token" endpoint of
             the service that implements oauth.  For Twitter, this is
             "https://api.twitter.com/oauth/access_token".
             </param>
            
             <param name="method">The method you will use to send the
             message asking for an access token.  For Twitter, this
             should be "POST".
             </param>
            
             <param name="pin">The PIN returned by the "Application approval" page
             shown by Twitter.  It's a string of numeric digits, 7 or so digits in
             length.
             </param>
            
             <returns>
               a response object that contains the entire text of the response,
               as well as extracted parameters. This method presumes the
               response is query-param encoded. In other words,
               oauth_token=foo&amp;something_else=bar.
             </returns>
        </member>
        <member name="M:OAuth.Manager.AcquireAccessToken(System.String)">
             <summary>
               Acquire an access token for Twitter, using the default endpoint and
               HTTP method.
             </summary>
             <remarks>
               <para>
                 To use this method, you must first set the oauth_token to the value
                 of the request token.  Eg, oauth["token"] = "whatever".
               </para>
               <para>
                 According to the OAuth spec, you need to do this only ONCE per
                 application, the first time the application is run.  The
                 normal oauth workflow is: (1) get a request token, (2) use
                 that to acquire an access token (which requires explicit user
                 approval), then (3) using that access token, invoke protected
                 services.  The first two steps need to be done only once per
                 application.
               </para>
               <para>
                 For Twitter, at least, you can cache the access tokens
                 indefinitely; Twitter says they never expire.  However,
                 other oauth services may not do the same. Also: the user
                 may at any time revoke his authorization for your app,
                 in which case you will get 403 errors. In that case you
                 need to perform the first 2 steps again.
               </para>
             </remarks>
            
             <seealso cref="M:OAuth.Manager.AcquireRequestToken"/>
            
             <example>
               <para>
                 This example shows how to request an access token and key
                 from Twitter. It presumes you've already obtained a
                 consumer key and secret via app registration. Requesting
                 an access token is necessary only the first time you
                 contact the service. You can cache the access key and
                 token for subsequent runs, later.
               </para>
               <code>
               var oauth = new OAuth.Manager();
               // The consumer_{key,secret} are obtained via registration
               oauth["consumer_key"] = "~~~CONSUMER_KEY~~~~";
               oauth["consumer_secret"] = "~~~CONSUMER_SECRET~~~";
               oauth.AcquireRequestToken();
               var authzUrl = "https://api.twitter.com/oauth/authorize?oauth_token=" + oauth["token"];
               System.Diagnostics.Process.Start(authzUrl);
               // instruct the user to type in the PIN from that browser window
               var pin = "...";
               oauth.AcquireAccessToken(pin);
            
               // now, update twitter status using that access token
               var appUrl = "http://api.twitter.com/1/statuses/update.xml?status=Hello";
               var authzHeader = oauth.GenerateAuthzHeader(appUrl, "POST");
               var request = (HttpWebRequest)WebRequest.Create(appUrl);
               request.Method = "POST";
               request.PreAuthenticate = true;
               request.AllowWriteStreamBuffering = true;
               request.Headers.Add("Authorization", authzHeader);
            
               using (var response = (HttpWebResponse)request.GetResponse())
               {
                 if (response.StatusCode != HttpStatusCode.OK)
                   MessageBox.Show("There's been a problem trying to tweet:" +
                                   Environment.NewLine +
                                   response.StatusDescription);
               }
               </code>
             </example>
            
             <param name="pin">The PIN returned by the "Application approval" page
             shown by Twitter.  It's a string of numeric digits, 7 or so digits in
             length.
             </param>
            
             <returns>
               a response object that contains the entire text of the response,
               as well as extracted parameters. This method presumes the
               response is query-param encoded. In other words,
               oauth_token=foo&amp;something_else=bar.
             </returns>
        </member>
        <member name="M:OAuth.Manager.GenerateCredsHeader(System.String,System.String,System.String)">
             <summary>
               Generate a string to be used in an Authorization header in
               an HTTP request.
             </summary>
             <remarks>
               <para>
                 This method assembles the available oauth_ parameters that
                 have been set in the Dictionary in this instance, produces
                 the signature base (As described by the OAuth spec, RFC 5849),
                 signs it, then re-formats the oauth_ parameters into the
                 appropriate form, including the oauth_signature value, and
                 returns the result.
               </para>
               <para>
                 If you pass in a non-null, non-empty realm, this method will
                 include the realm='foo' clause in the generated Authorization header.
               </para>
             </remarks>
            
             <seealso cref="M:OAuth.Manager.GenerateAuthzHeader(System.String,System.String)"/>
            
             <param name="uri">The "verify credentials" endpoint for the
             service to communicate with, via an OAuth-authenticated
             message. For Twitpic (authenticated through Twitter), this is
             "https://api.twitter.com/1/account/verify_credentials.json".
             </param>
            
             <param name="method">The HTTP method to use to request the
             credentials verification.  For Twitpic (authenticated
             through Twitter), this is "GET".</param>
            
             <param name="realm">The "Realm" to use to verify
             credentials. For Twitpic (authenticated through Twitter),
             this is "http://api.twitter.com/".</param>
            
             <returns>The OAuth authorization header parameter that has been
             generated given all the oauth input parameters.</returns>
        </member>
        <member name="M:OAuth.Manager.GenerateAuthzHeader(System.String,System.String)">
             <summary>
               Generate a string to be used in an Authorization header in
               an HTTP request.
             </summary>
             <remarks>
               <para>
                 This method assembles the available oauth_ parameters that
                 have been set in the Dictionary in this instance, produces
                 the signature base (As described by the OAuth spec, RFC 5849),
                 signs it, then re-formats the oauth_ parameters into the
                 appropriate form, including the oauth_signature value, and
                 returns the result.
               </para>
             </remarks>
            
             <example>
               <para>
                 This example shows how to update the Twitter status
                 using the stored consumer key and secret, and a previously
                 obtained access token and secret.
               </para>
               <code>
               var oauth = new OAuth.Manager();
               oauth["consumer_key"]    = "~~ your stored consumer key ~~";
               oauth["consumer_secret"] = "~~ your stored consumer secret ~~";
               oauth["token"]           = "~~ your stored access token ~~";
               oauth["token_secret"]    = "~~ your stored access secret ~~";
               var appUrl = "http://api.twitter.com/1/statuses/update.xml?status=Hello";
               var authzHeader = oauth.GenerateAuthzHeader(appUrl, "POST");
               var request = (HttpWebRequest)WebRequest.Create(appUrl);
               request.Method = "POST";
               request.PreAuthenticate = true;
               request.AllowWriteStreamBuffering = true;
               request.Headers.Add("Authorization", authzHeader);
            
               using (var response = (HttpWebResponse)request.GetResponse())
               {
                 if (response.StatusCode != HttpStatusCode.OK)
                   MessageBox.Show("There's been a problem trying to tweet:" +
                                   Environment.NewLine +
                                   response.StatusDescription);
               }
               </code>
             </example>
            
             <seealso cref="M:OAuth.Manager.GenerateCredsHeader(System.String,System.String,System.String)"/>
            
             <param name="uri">The target URI that the application will connet
             to, via an OAuth-protected protocol. </param>
            
             <param name="method">The HTTP method that will be used to connect
             to the target URI. </param>
            
             <returns>The OAuth authorization header that has been generated
             given all the oauth input parameters.</returns>
        </member>
        <member name="M:OAuth.Manager.GetSignatureBase(System.String,System.String)">
            <summary>
            Formats the list of request parameters into "signature base" string as
            defined by RFC 5849.  This will then be MAC'd with a suitable hash.
            </summary>
        </member>
        <member name="P:OAuth.Manager.Item(System.String)">
             <summary>
               The string indexer to get or set oauth parameter values.
             </summary>
             <remarks>
               <para>
                 Use the parameter name *without* the oauth_ prefix.  For
                 example, if you want to set the value for the
                 oauth_token parameter field in an HTTP message, then use
                 oauth["token"].
               </para>
               <para>
                 The set of oauth param names known by this indexer includes:
                 callback, consumer_key, consumer_secret, timestamp, nonce,
                 signature_method, signature, token, token_secret, and version.
               </para>
               <para>
                 If you try setting a parameter with a name that is not known,
                 the setter will throw.  You cannot "add" new oauth parameters
                 using the setter on this indexer.
               </para>
             </remarks>
            
             <example>
               This shows how to set the oauth_consumer_key and
               oauth_consumer_secret using the indexer. Notice that the string
               values lack the oauth_ prefix.
               <code>
               var oauth = new OAuth.Manager();
               oauth["consumer_key"] = "~~~CONSUMER_KEY~~~~";
               oauth["consumer_secret"] = "~~~CONSUMER_SECRET~~~";
               oauth.AcquireRequestToken();
               </code>
             </example>
        </member>
        <member name="T:OAuth.OAuthResponse">
            <summary>
              A class to hold an OAuth response message.
            </summary>
        </member>
        <member name="M:OAuth.OAuthResponse.#ctor(System.String)">
            <summary>
              Constructor for the response to one transmission in an oauth dialogue.
              An application or may not not want direct access to this response.
            </summary>
        </member>
        <member name="P:OAuth.OAuthResponse.AllText">
            <summary>
              All of the text in the response. This is useful if the app wants
              to do its own parsing.
            </summary>
        </member>
        <member name="P:OAuth.OAuthResponse.Item(System.String)">
            <summary>
              a Dictionary of response parameters.
            </summary>
        </member>
    </members>
</doc>
